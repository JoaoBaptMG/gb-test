;
; scenes/game/game.z80
; Contains the required routines to handle the game actors
;

include "gameboy.inc"

section "bank 0 scenes/game/actors.z80", rom0

; Initializes the actor list
ActorsInit::
    xor a
    ld bc, 64
    ld hl, wActorTypes
    jp MemoryFill

; Attempts to allocate space for a new actor
; input
;    - e: the type of the actor
; output
;    - a will return nonzero if a slot is not found, and zero if it is found
;    - hl will be scrapped
;
ActorNew::
    ; First, try to find an empty slot
    ld hl, wActorTypes
.findLoop:
    ld a, [hl+]         ; Check if that slot is empty
    and a               ; If it is, continue
    jr z, .foundSlot
    bit 6, l            ; If all slots were full, return early
    ret nz
    jr .findLoop
.foundSlot:
    ; We need to call the init function for the actor
    ; Find the address of the allocated region
    dec l
    ld h, HIGH(wActorTypes)
    ld [hl], e                  ; Store the actor type
    ret

; Load actors from map
; input
;   de: pointing to the number of objects in the game
ActorsLoadFromMap::
    ld a, [de]          ; Get the number of objects
    and a               ; If it's zero, return
    ret z
    inc de              ; Make de point to the first object
    ld b, 0
    ld c, a             ; Transfer the size to the correct register
    push bc             ; Push the count
    ld hl, wActorTypes  ; The first transfer is to the actor types table
    call MemoryCopy     ; The first memory copy
    pop bc              ; Restore the count
    swap c              ; Multiply by 16, swapping c
    ld a, c             ; a = (u4) low, (l4) high
    and $0f             ; a = (u4) 0, (l4) high
    ld b, a             ; transfer to b
    xor a, c            ; a = (u4) low, (l4) 0
    ld c, a             ; transfer to c
    ld hl, wActorBaseMemory ; now transfer the initial bytes
    jp MemoryCopy           ; finish by transferring all that

; Load graphics for types declared in map
; input
;   hl: pointing to the first declared type
; output
;   de: pointing to the end of the declared types
ActorsLoadGraphicsTypes::
    ld d, h
    ld e, l
    ld hl, vActorTypeSlots
.actorLoadGraphicsLoop:
    ld a, [de]          ; Get the declared type
    inc de
    and a               ; Zero marks the end of the type list
    ret z
    ld b, HIGH(wTypeGraphics)   ; Assign the found ID to the correct pointer
    ld c, a

    ld a, l             ; Obtain the character ID (which is the address / 16)
    xor a, h            ; a = (l ^ h)
    and $0f             ; upper: 0, lower: l ^ h 
    xor a, h            ; upper: h, lower, l
    swap a              ; correctly calculated tile ID
    ld [bc], a          ; store it to the pointer value

    push hl             ; Push the VRAM address
    ; Get the graphics address (must be bank 0)
    ld h, HIGH(ActorTypeGraphicsTable) >> 1
    ld l, c             ; Load the type to the right place
    add hl, hl          ; times 2

    ; Load the address
    ld a, [hl+]
    ld b, [hl]
    ld c, a
    pop hl

    push de             ; Push the structure pointer
.eachTypeLoadGraphicsLoop:
    ; Load the size
    ld a, [bc]          ; Check the size
    and a               ; If it's zero, bail out
    jr z, .eachTypeLoadGraphicsLoopEnd

    ld d, a             ; Load in the right register
    inc bc
    ld a, [bc]          ; Load the bank
    ld [rROMB0], a
    inc bc
    ld a, [bc]          ; Low address
    ld e, a
    inc bc
    ld a, [bc]          ; High address
    push bc             ; Push the graphics table pointer
    ld c, d             ; Put the address in the right place
    ld d, a
    ld b, 0             ; Re-stash 0
    call MemoryCopy     ; Copy to the VRAM - hl will finish pointing to the next address
    pop bc              ; Pop the graphics table pointer
    inc bc
    jr .eachTypeLoadGraphicsLoop

.eachTypeLoadGraphicsLoopEnd:
    pop de              ; Restore the structure pointer
    jr .actorLoadGraphicsLoop

; Update all the actors according to the list
ActorsUpdate::
    ; Loop for each actor and call their update function
    ld bc, wActorTypes
    ld d, HIGH(ActorTypeTable)
    ld hl, wActorBaseMemory

.actorLoop:
    ld a, [bc]      ; Pick the actor type
    and a           ; If it's empty, bail out
    jr z, .skipActor

    ld e, a         ; Load the table
    ld a, [de]      ; The subroutine's bank
    ld [rROMB0], a
    push bc
    inc d
    ld a, [de]      ; The subroutine's low addres
    ld c, a
    inc d
    ld a, [de]      ; The subroutine's high address
    ld b, a
    push hl         ; Push HL
    ; Calling convention for the update function:
    ;   hl - address of allocated region for that actor
    call DynamicBC  ; Call from BC
    pop hl          ; Restore everything
    pop bc
    ld d, HIGH(ActorTypeTable)  ; Reload the actor table

.skipActor:
    ld a, l         ; Increase the actor's data pointer
    add a, 16
    ld l, a
    jr nc, .noOverflow18
    inc h
.noOverflow18:
    inc c           ; Check if we ended all the actors
    bit 6, c
    jr z, .actorLoop
    ret

section "wram scenes/game/actors.z80", wram0, align[8]
; The actor types and the region allocated to them
wActorBaseMemory: ds 16*64
wActorTypes: ds 64
