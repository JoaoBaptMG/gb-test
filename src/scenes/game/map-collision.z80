;
; scenes/game/map-collision.z80
; Contains the subroutines for box intersection with the tilemap
;

include "gameboy.inc"

section "bank 0 scenes/game/map-collision.z80", rom0

; Check an intersection with a horizontal line
; input:
;    hl: a pointer to a structure containing
;       - 16.8 X and Y positions (already added to speed)
;    bc: the width of the line in 8.8 fixed point format (- $0.01)
;    de: a value to add to the Y position before getting the tile index
; output:
;    hl, bc, de will be scrapped
;    the result of the collision will be stored in the carry bit
CheckHorizontalLineCollision::
    ; Add the position to the width for the second position
    ld a, [hl+]
    add a, c        ; We don't need the subpixel calculation here, we just want the carry
    ld a, [hl+]     ; Add the pixels here, taking care of the parameters
    ld c, a         ; c = low of posX
    adc a, b        ; Add the integer part of the width, along with the carry of the subpixel calculation
    ld b, a         ; b = low of (posX + width)
    adc a, [hl]     ; a = low of (posX + width) + high of posX (+ carry of posX)
    sub a, b        ; a = high of (posX + width), since the last carry will be based on low of (posX + width)
    xor a, b        ; a = high of (posX + width) ^ low of (posX + width)
    and a, $0f      ; upper 4 bits = 0, lower 4 bits = high of (posX + width) ^ low of (posX + width)
    xor a, b        ; Now, upper 4 bits = low of (posX + width), lower 4 bits = high of (posX + width)
    swap a          ; a is the tile position in place
    ld b, a         ; b = lastTileX

    ld a, [hl+]     ; a = high of posX
    xor a, c        ; a = high of posX ^ low of posX
    and a, $0f      ; The same technique here
    xor a, c        ;
    swap a          ; a is the first tile position in place
    ld c, a         ; c = firstTileX

    ; Calculate the number of runs
    ld a, b         ; a = lastTileX
    sub a, c        ; a = lastTileX - firstTileX
    inc a           ; a = lastTileX - firstTileX + 1
    ld b, a         ; b = lastTilex - firstTileX + 1

    ; Calculate the Y position
    ld a, [hl+]
    add a, e        ; We don't need the subpixel calculation here, we just want the carry
    ld a, [hl+]     ; Add the pixels here, taking care of the parameters
    adc a, d        ; Add the integer part of the width, along with the carry of the subpixel calculation
    ld e, a         ; d = low of (posY + offset)
    adc a, [hl]     ; a = low of (posY + offset) + high of posY (+ carry of offset)
    sub a, e        ; a = high of (posY + offset), since the last carry will be based on low of (posY + offset)
    xor a, e        ; a = high of (posY + offset) ^ low of (posY + offset)
    and a, $0f      ; upper 4 bits = 0, lower 4 bits = high of (posY + offset) ^ low of (posY + offset)
    xor a, e        ; Now, upper 4 bits = low of (posY + offset), lower 4 bits = high of (posY + offset)
    swap a          ; a is the tile position in place

    ; With the positions done, now we need to compute the addresses
    ld d, 0
    ld e, a
    ld a, [wMapWidth]
    call HLeqAxDE       ; hl = tileY * width
    ld e, c             ; e = firstTileX
    add hl, de          ; hl = tileY * width + tileX

    ; load the map address
    ld a, [wMapAddress]
    ld e, a
    ld a, [wMapAddress+1]
    ld d, a
    add hl, de          ; hl = wMapAddress + tileY * width + tileX

    ; Now, we iterate for each X and each Y to find if some tile checks
    ; Load the base address already
    ld d, HIGH(wTilesetFlags)

    ; Change bank
    ld a, [wMapBank]
    ld [rROMB0], a

.loop:
    ; Load the tile present there
    ld a, [hl+]
    ld e, a
    ; Load the flag
    ld a, [de]
    ; If the flag has 'solid', return with carry set
    rra
    ret c ; Return with carry set if collision happened
    ; If not, continue loop, noting that carry is reset
    dec b
    jr nz, .loop

    ; No collision, return with carry reset
    ret

; Check an intersection with a horizontal line
; input:
;    hl: a pointer to a structure containing
;       - 16.8 X and Y positions (already added to speed)
;    bc: the height of the line in 8.8 fixed point format (- $0.01)
;    de: a value to add to the X position before getting the tile index
; output:
;    hl, bc, de will be scrapped
;    the result of the collision will be stored in the carry bit
CheckVerticalLineCollision::
    ; Add the position to the width for the second position
    ld a, [hl+]
    add a, e        ; We don't need the subpixel calculation here, we just want the carry
    ld a, [hl+]     ; Add the pixels here, taking care of the parameters
    adc a, d        ; Add the integer part of the width, along with the carry of the subpixel calculation
    ld d, a         ; d = low of (posX + offset)
    adc a, [hl]     ; a = low of (posX + offset) + high of posX (+ carry of offset)
    sub a, d        ; a = high of (posX + offset), since the last carry will be based on low of (posX + offset)
    xor a, d        ; a = high of (posX + offset) ^ low of (posX + offset)
    and a, $0f      ; upper 4 bits = 0, lower 4 bits = high of (posX + offset) ^ low of (posX + offset)
    xor a, d        ; Now, upper 4 bits = low of (posX + offset), lower 4 bits = high of (posX + offset)
    swap a          ; a is the tile position in place
    ld e, a         ; e = tileX
    inc hl          ; so we point to the Y position

    ; Calculate the Y position
    ld a, [hl+]
    add a, c        ; We don't need the subpixel calculation here, we just want the carry
    ld a, [hl+]     ; Add the pixels here, taking care of the parameters
    ld c, a         ; c = low of posY
    adc a, b        ; Add the integer part of the width, along with the carry of the subpixel calculation
    ld b, a         ; b = low of (posY + height)
    ld d, [hl]      ; d = high of posY
    adc a, d        ; a = low of (posY + height) + high of posY (+ carry of height)
    sub a, b        ; a = high of (posY + height), since the last carry will be based on low of (posY + offset)
    xor a, b        ; a = high of (posY + height) ^ low of (posY + height)
    and a, $0f      ; upper 4 bits = 0, lower 4 bits = high of (posY + height) ^ low of (posY + height)
    xor a, b        ; Now, upper 4 bits = low of (posY + height), lower 4 bits = high of (posY + height)
    swap a          ; a is the tile position in place
    ld b, a         ; b = lastTileY

    ld a, d         ; a = high of posY
    xor a, c        ; a = high of posY ^ low of posY
    and a, $0f      ; The same technique here
    xor a, c        ;
    swap a          ; a is the first tile position in place
    ld c, a         ; c = firstTileY

    ; Calculate the number of runs
    ld a, b         ; a = lastTileY
    sub a, c        ; a = lastTileY - firstTileY
    inc a           ; a = lastTileY - firstTileY + 1
    ld d, a         ; d = lastTileY - firstTileY + 1

    ; With the positions done, now we need to compute the addresses
    ld b, 0
    ld a, [wMapWidth]
    call HLeqAxBC       ; hl = firstTileY * width
    ld c, e             ; c = tileX
    add hl, bc          ; hl = tileY * width + tileX

    ; load the map address
    ld a, [wMapAddress]
    ld c, a
    ld a, [wMapAddress+1]
    ld b, a
    add hl, bc          ; hl = wMapAddress + tileY * width + tileX

    ; Now, we iterate for each X and each Y to find if some tile checks
    ; Load the base address already
    ld b, HIGH(wTilesetFlags)

    ; Change bank
    ld a, [wMapBank]
    ld [rROMB0], a

.loop:
    ; Load the tile present there
    ld c, [hl]
    ; Load the flag
    ld a, [bc]
    ; If the flag has 'solid', return with carry set
    rra
    ret c ; Return with carry set if collision happened
    ; If not, continue loop, noting that carry is reset
    dec d
    ret z

    ; Add the map width
    ld a, [wMapWidth]
    add a, l
    ld l, a
    jr nc, .loop
    inc h
    jr .loop
